Certainly, let's explore how method inheritance works in PHP when dealing with multiple classes.
Multiple Class Inheritance (Indirect)
 * PHP doesn't directly support multiple class inheritance like some other languages (e.g., C++).
 * However, you can achieve a similar effect through interfaces and traits.
1. Interfaces:
 * An interface defines a contract of methods that a class must implement.
 * A class can implement multiple interfaces.
 * This allows you to define a set of shared behaviors that different classes must adhere to.
Example:
interface Flyable {
    public function fly();
}

interface Swimmable {
    public function swim();
}

class Bird implements Flyable {
    public function fly() {
        echo "Bird is flying.\n";
    }
}

class Fish implements Swimmable {
    public function swim() {
        echo "Fish is swimming.\n";
    }
}

class Duck implements Flyable, Swimmable {
    public function fly() {
        echo "Duck is flying.\n";
    }

    public function swim() {
        echo "Duck is swimming.\n";
    }
}

In this example:
 * Flyable and Swimmable are interfaces.
 * Bird implements Flyable.
 * Fish implements Swimmable.
 * Duck implements both Flyable and Swimmable, effectively inheriting the behaviors of both interfaces.
2. Traits:
 * Traits are a mechanism for code reuse.
 * They allow you to group together a set of methods and properties that can be "used" within multiple classes.
 * Traits can be considered a form of "horizontal" inheritance, as opposed to the "vertical" inheritance from a single parent class.
Example:
trait CanFly {
    public function fly() {
        echo "Can fly!\n";
    }
}

trait CanSwim {
    public function swim() {
        echo "Can swim!\n";
    }
}

class Bat {
    use CanFly;
}

class Penguin {
    use CanSwim;
}

class Seagull {
    use CanFly, CanSwim;
}

In this example:
 * CanFly and CanSwim are traits.
 * Bat uses the CanFly trait.
 * Penguin uses the CanSwim trait.
 * Seagull uses both the CanFly and CanSwim traits.
Key Points:
 * Interfaces focus on defining a contract of methods.
 * Traits focus on code reusability by grouping together methods and properties.
 * Both mechanisms allow for multiple "inherited" behaviors in PHP without direct multiple class inheritance.
I hope this explanation clarifies how you can achieve multiple class-like inheritance in PHP using interfaces and traits!
